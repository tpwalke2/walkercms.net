<h2>Creating Content</h2>
<ul>
  <li><a href="#overview">Overview</a></li>
  <li><a href="#primary-content">Primary Content</a></li>
  <li><a href="#secondary-content">Secondary Content</a></li>
  <li>
    <a href="#primary-nav">Custom Primary Navigation</a>
    <ul>
      <li><a href="#primary-nav-example">Example</a></li>
      <li><a href="#primary-nav-variables">Variables</a></li>
    </ul>
  </li>
  <li><a href="#sub-nav">Custom Sub-Navigation</a></li>
  <li>
    <a href="#html-headers">Custom HTML Headers</a>
    <ul>
      <li><a href="#site-header">Site-wide Header</a></li>
      <li><a href="#page-headers">Page-specific Headers</a></li>
      <li><a href="#html-header-variables">Variables</a></li>
    </ul>
  </li>
  <li><a href="#page-headers">Custom Page Headers</a></li>
  <li><a href="#page-footers">Custom Footers</a></li>
  <li><a href="#page-stylesheet">Custom Stylesheets</a></li>
  <li><a href="#page-javascript">Custom Javascript</a></li>
</ul>

<h3 id="overview">Overview</h3>
<p>There are a number of times (extension points) during page generation that WalkerCMS
   checks for and includes custom content. Each of extension point, unless otherwise noted,
   corresponds to a sub-directory within the site-specific directory (See
   <a href="install#directory-structure">Directory Structure</a>). Creating content in
   WalkerCMS is as simple as saving text files into these sub-directories.</p>
<p>There are general characteristics that are shared by all of the directories. The files
   must have the same name as the corresponding page ID with no extension (e.g. the page you
   are reading has a page ID of <span class="page-id">content</span>, the file that contains
   the content is in <span class="filename">sitespecific/content/content</span>). The files
   may contain text, HTML, or even PHP. Each extension point offers different supporting
   variables that you may use.</p>
<p>Below, you will find more detail about each sub-directory including descriptions of the
   variables available to files in each one.</p>
<p class="back-to-top"><a href="#top" title="Back to top">Back to top</a></p>

<h3 id="primary-content">Primary Content</h3>
<p>Primary content files are placed in the <span class="filename">content</span>
   sub-directory. These files contain the primary content for a requested page. For example,
   this text that you are reading is contained in a file named
   <span class="filename">content</span> in the content sub-directory. WalkerCMS includes
   and PHP evaluates the file and places the result into the
   <span class="variable-name">page_content</span> variable in the
   <a href="templates#primary-template">primary template</a>.</p>
<p>Following is a table of variables that are available for inclusion or logic processing in
   a given primary content file. Note that you may also use any other valid PHP.</p>
<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Data&nbsp;Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="variable-name">contact_form</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Placeholder for the contact form subsystem. This may be the form itself or the
           results for an attempted contact form submission.</p>
        <p>This variable is neither populated, nor set if this page does not correspond to
           the <span class="setting-name">contact_page</span> configuration setting.</p>
        <p>See also:</p>
        <ul>
          <li><a href="extrafeatures#contact-form" title="Contact Form">Contact Form</a></li>
          <li><a href="config" title="Configuring WalkerCMS">Configuration</a></li>
        </ul>
      </td>
    </tr>
    <tr>
      <td class="variable-name">inclusion_type</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Will always contain the value &quot;<span class="code">content</span>&quot;</p>
      </td>
    </tr>
    <tr>
      <td class="variable-name">page_id</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Contains the currently requested page ID.</p>
      </td>
    </tr>
    <tr>
      <td class="variable-name">site_version</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Contains the version of WalkerCMS against which this site is configured.</p>
        <p>Corresponds with the <span class="setting-name">version</span> site configuration
           setting.</p>
        <p>See also:</p>
        <ul>
          <li><a href="config" title="Configuring WalkerCMS">Configuration</a></li>
        </ul>
      </td>
    </tr>
  </tbody>
</table>
<p class="back-to-top"><a href="#top" title="Back to top">Back to top</a></p>

<h3 id="secondary-content">Secondary Content</h3>
<p>Secondary content files are placed in the <span class="filename">secondarycontent</span>
   sub-directory. Secondary content files are generally used for two-column layouts (or
   three-column if sub-navigation is available on a page). WalkerCMS first determines if
   there is a secondary content file available
   (<span class="variable-name">has_secondary_content</span> variable for the
   <a href="templates#primary-template">primary template</a>). If there is a file, then
   WalkerCMS includes the file, whose evaluated content will be available in the
   <span class="variable-name">secondary_content</span> in the primary template.</p>
<p>Following is a table of variables that are available for inclusion or logic processing in
   a given primary content file. Note that you may also use any other valid PHP.</p>
<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Data&nbsp;Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="variable-name">inclusion_type</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Will always contain the value
           &quot;<span class="code">secondarycontent</span>&quot;</p>
      </td>
    </tr>
    <tr>
      <td class="variable-name">page_id</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Contains the currently requested page ID.</p>
      </td>
    </tr>
  </tbody>
</table>
<p class="back-to-top"><a href="#top" title="Back to top">Back to top</a></p>

<h3 id="primary-nav">Custom Primary Navigation</h3>
<p>Custom primary navigation files are placed in the <span class="filename">nav</span>
   sub-directory. Unlike the other custom content extension points, custom primary
   navigation does not completely replace the primary navigation for a requested page.
   Instead, as WalkerCMS is building the primary navigation, it determines if there is
   a file available for the currently in process page. This allows you to place custom
   content directly into the primary navigation menu for all pages.</p>
<h4 id="primary-nav-example">Example</h4>
<p>A potential use could be for placing a search box into the primary navigation. You would
   need to configure a <span class="page-id">search</span> page that was shown in the main
   navigation menu. Then you would add a <span class="filename">search</span> custom primary
   navigation file that included the search form. WalkerCMS would then include the search
   form on any primary navigation menu.</p>
<h4 id="primary-nav-variables">Variables</h4>
<p>As in the other custom content types, these files may include text, HTML, or valid PHP.
   Additionally, below is a table of variables available for use in your file.</p>
<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Data&nbsp;Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="variable-name">inclusion_type</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Will always contain the value &quot;<span class="code">nav</span>&quot;</p>
      </td>
    </tr>
    <tr>
      <td class="variable-name">page_id</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Contains the page ID that is currently being processed by WalkerCMS for
           displaying in the primary navigation.</p>
      </td>
    </tr>
  </tbody>
</table>
<p class="back-to-top"><a href="#top" title="Back to top">Back to top</a></p>

<h3 id="sub-nav">Custom Sub-Navigation</h3>
<p>Custom sub-navigation files are placed in the <span class="filename">subnav</span>
   sub-directory. The content in a custom sub-navigation file will completely replace the
   default sub-navigation menu that WalkerCMS generates for a requested page. Whether
   default or custom sub-navigation is used, WalkerCMS will populate the
   <span class="variable-name">has_sub_nav</span> and
   <span class="variable-name">sub_nav</span> appropriately in the
   <a href="templates#primary-template">primary template</a>.</p>
<p>Following is a table of variables that are available for inclusion or logic processing in
   a given primary content file. Note that you may also use any other valid PHP.</p>
<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Data&nbsp;Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="variable-name">inclusion_type</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Will always contain the value &quot;<span class="code">subnav</span>&quot;</p>
      </td>
    </tr>
    <tr>
      <td class="variable-name">page_id</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Contains the currently requested page ID.</p>
      </td>
    </tr>
  </tbody>
</table>
<p class="back-to-top"><a href="#top" title="Back to top">Back to top</a></p>

<h3 id="html-headers">Custom HTML Headers</h3>
<p>Custom HTML header files are placed in the <span class="filename">htmlheaders</span>
   sub-directory. WalkerCMS includes these files automatically in the default HTML header
   section that it generates. There are two types of custom HTML headers: site-wide and
   page-specific.</p>
<h4 id="#site-header">Site-wide Header</h4>
<p>The site-wide header extension point allows a website admin to add content into the
   HTML header that is necessary for the whole website, but is not included by WalkerCMS.
   For example, suppose the website requires a specific jQuery plugin. The website admin
   would add a reference to the jQuery plugin in the site-wide header.</p>
<p>As with all other custom html header content files, the site-wide header is located in
   the <span class="filename">htmlheaders</span> and must have a name of
   <span class="filename">site</span>. In the default HTML header template that WalkerCMS
   generates, the site-wide HTML header is included after the default scripts and
   stylesheets, but before the page-specific HTML headers. This placement gives you the
   option to overwrite the default scripts or stylesheets. For example, if the site needs an
   older version of jQuery, you can use the site-wide HTML header to include it.</p>
<p>If there is a site-wide HTML header, then WalkerCMS will set the values of the
   <span class="variable-name">has_site_specific_html_header</span> and
   <span class="variable-name">site_specific_html_header</span> variables appropriately in
   the <a href="templates#primary-template">primary template</a> and the
   <a href="templates#layout-template">layout template</a>.</p>
<h4 id="#page-headers">Page-specific Headers</h4>
<p>The page-specific header extension point allows a website admin to add content into the
   HTML header section for a specifically requested page ID. To include custom HTML header
   content for a given page, create a file with the same name as the requested page ID. For
   example, the custom HTML header header for this page would be
   <span class="filename">htmlheaders/content</span>.</p>
<p>The content is included after WalkerCMS includes any potential site-wide HTML header
   content, but before the page specific stylesheets and script references. If there is a
   page-specific HTML header, then WalkerCMS will set the values of the
   <span class="variable-name">has_page_specific_html_header</span> and
   <span class="variable-name">page_specific_html_header</span> variables appropriately in
   the <a href="templates#primary-template">primary template</a> and the
   <a href="templates#layout-template">layout template</a>.</p>
<h4 id="html-header-variables">Variables</h4>
<p>Following is a table of variables that are available for inclusion or logic processing in
   a given primary content file. Note that you may also use any other valid PHP.</p>
<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Data&nbsp;Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="variable-name">inclusion_type</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Will always contain the value
           &quot;<span class="code">htmlheaders</span>&quot;</p>
      </td>
    </tr>
    <tr>
      <td class="variable-name">page_id</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Always set to <span class="code">site</span> for the site-wide HTML header</p>
        <p>Contains the currently requested page ID for page-specific HTML headers.</p>
      </td>
    </tr>
  </tbody>
</table>
<p class="back-to-top"><a href="#top" title="Back to top">Back to top</a></p>

<h3 id="page-headers">Custom Page Headers</h3>
<p>Custom page header files are placed in the <span class="filename">headers</span>
   sub-directory. Generally a template will have a standard header that appears at the top
   of each page. Custom header files offer an additional extension point for changing the
   header.</p>
<p>WalkerCMS does not automatically determine where the custom page header will appear, that
   is up to you as the template designer. Instead, if there is a custom header file
   available for the currently requested page ID, WalkerCMS will populate the
   <span class="variable-name">has_page_specific_header</span> and the
   <span class="variable-name">page_specific_header</span> variables appropriately in
   the <a href="templates#primary-template">primary template</a>.</p>
<p>Following is a table of variables that are available for inclusion or logic processing in
   a given primary content file. Note that you may also use any other valid PHP.</p>
<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Data&nbsp;Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="variable-name">inclusion_type</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Will always contain the value &quot;<span class="code">headers</span>&quot;</p>
      </td>
    </tr>
    <tr>
      <td class="variable-name">page_id</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Contains the currently requested page ID.</p>
      </td>
    </tr>
  </tbody>
</table>
<p class="back-to-top"><a href="#top" title="Back to top">Back to top</a></p>

<h3 id="page-footers">Custom Footers</h3>
<p>Custom footer files are placed in the <span class="filename">footers</span>
   sub-directory.Generally a template will have a standard footer that appears at the bottom
   of each page. Custom footer files offer an additional extension point for changing the
   footer.</p>
<p>WalkerCMS does not automatically determine where the custom footer will appear, that
   is up to you as the template designer. Instead, if there is a custom footer file
   available for the currently requested page ID, WalkerCMS will populate the
   <span class="variable-name">has_page_specific_footer</span> and the
   <span class="variable-name">page_specific_footer</span> variables appropriately in
   the <a href="templates#primary-template">primary template</a>.</p>
<p>Following is a table of variables that are available for inclusion or logic processing in
   a given primary content file. Note that you may also use any other valid PHP.</p>
<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Data&nbsp;Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="variable-name">inclusion_type</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Will always contain the value &quot;<span class="code">footers</span>&quot;</p>
      </td>
    </tr>
    <tr>
      <td class="variable-name">page_id</td>
      <td class="data-type">string</td>
      <td class="variable-desc">
        <p>Contains the currently requested page ID.</p>
      </td>
    </tr>
  </tbody>
</table>
<p class="back-to-top"><a href="#top" title="Back to top">Back to top</a></p>

<h3 id="page-stylesheet">Custom Stylesheets</h3>
<p>Unlike most of the other extension points, custom stylesheets are placed within the
   <span class="filename">public/styles</span> (See
   <a href="install#directory-structure">Directory Structure</a>). The stylehseet must be
   CSS and have a <span class="filename">.css</span> extension. It must also have a name
   that directly corresponds to the page ID for which it will be included. For example,
   the page you are reading has a page ID of <span class="page-id"><?= $page_id ?></span>
   and would have a custom stylesheet named
   <span class="filename"><?= $page_id ?>.css</span>, if the file happened to be present.</p>
<p>If WalkerCMS detects a custom stylesheet file available, then it will set the
   <span class="variable-name">has_page_specific_stylesheet</span> in the
   <a href="templates#primary-template">primary template</a> to true and generate a link
   to the stylesheet in the HTML header. WalkerCMS places the link after the
   <a href="#html-headers">page-specific HTML header</a>, but before the
   <a href="#page-javascript">page-specific javascript</a> reference.</p>
<p>As WalkerCMS generates an HTML link reference to this file, there are no variables
   available for this extension point.</p>
<p class="back-to-top"><a href="#top" title="Back to top">Back to top</a></p>
   
<h3 id="page-javascript">Custom Javascript</h3>
<p>Unlike most of the other extension points, custom javascript files are placed within the
   <span class="filename">public/scripts</span> (See
   <a href="install#directory-structure">Directory Structure</a>). The script must be
   javascript and have a <span class="filename">.js</span> extension. It must also have a
   name that directly corresponds to the page ID for which it will be included. For example,
   the page you are reading has a page ID of <span class="page-id"><?= $page_id ?></span>
   and would have a custom javascript named
   <span class="filename"><?= $page_id ?>.js</span>, if the file happened to be present.</p>
<p>If WalkerCMS detects a custom javascript file available, then it will set the
   <span class="variable-name">has_page_specific_javascripts</span> in the
   <a href="templates#primary-template">primary template</a> to true and generate a script
   reference to the javascript in the HTML header. WalkerCMS places the sript reference,
   after the <a href="#page-stylesheet">page-specific javascript</a>.
<p>As WalkerCMS generates an HTML link reference to this file, there are no variables
   available for this extension point.</p>
<p class="back-to-top"><a href="#top" title="Back to top">Back to top</a></p>